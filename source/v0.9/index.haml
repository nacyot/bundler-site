#intro
  Bundler manages an <strong>application's dependencies</strong> through its
  entire life across many machines systematically and repeatably.

%h2 Getting Started

.contents
  .bullet
    .description
      Getting started with bundler is easy
    :code
      $ gem install bundler

  .bullet
    .description
      If you're on an old version of RubyGems
      (before 1.3.6)
    :code
      $ gem update --system

  .bullet
    .description
      Specify your dependencies in a Gemfile in your project's root
    :code
      # lang: ruby
      source 'https://rubygems.org'
      gem 'nokogiri'
      gem 'rack', '~>1.1'
      gem 'rspec', :require => 'spec'
    = link_to 'Learn More: Gemfiles', 'gemfile.html'

  .bullet
    .description
      Install all of the required gems from your specified sources
    :code
      $ bundle install
      $ git add Gemfile
    = link_to 'Learn More: bundle install', 'bundle_install.html'

  .bullet
    .description
      Inside your app, load up the bundled environment
    :code
      # lang: ruby
      require 'rubygems'
      require 'bundler'
      Bundler.setup

      require 'nokogiri'
      # any other requires you might need
    = link_to 'Learn More: Bundler.setup', 'bundler_setup.html'

  .bullet
    .description
      Run a script provided by a bundled gem
    :code
      $ bundle exec rackup

  .bullet
    .description
      When you're ready to share your application or deploy it, lock down all the versions of the gems you're using
    :code
      $ bundle lock
      $ git add Gemfile.lock
    = link_to 'Learn more: bundle lock', 'bundle_lock.html'

%h2 Using Bundler with Frameworks

.contents
  .bullet
    .description
      Bundler works out of the box with Rails 3. Once you understand the basics of using bundler, you know everything you need to know.
      = link_to 'Using Bundler with Rails 3', 'rails3.html'

  .bullet
    .description
      Bundler works with Rails 2.3 with a small change to boot.rb and adding a preinitializer.rb.
      = link_to 'Using Bundler with Rails 2.3', 'rails23.html'

  / .bullet
  /   .description
  /     Setting up Sinatra to use Bundler is as simple as using Bundler itself.
  /     = link_to 'Using Bundler with Sinatra', 'sinatra.html'

%h2 Checking Out an Application With a Gemfile

.contents
  .bullet
    .description
      Install the required gems
    :code
      $ bundle install
    = link_to 'Learn More: bundle install', 'bundle_install.html'

%h2 Digging Further

.contents
  .bullet
    .description
      Store all of the required gems in your application. All future installs will get gems from this cache, bypassing rubygems.org
    :code
      $ bundle package
    = link_to 'Learn More: bundle package', 'bundle_package.html'

  .bullet
    .description
      Put dependencies in a group, so they can be ignored at install time or required together in your application
    :code
      # lang: ruby
      group :development do
        gem 'wirble'
      end
    = link_to 'Learn more: Groups', 'groups.html'

  .bullet
    .description
      Use a gem that is stored in git and has a .gemspec at its root. Gemspecs with bins or C extensions are supported
    :code
      # lang: ruby
      gem 'nokogiri', :git => 'https://github.com/tenderlove/nokogiri.git'
    = link_to 'Learn more: Git', 'git.html'

  .bullet
    .description
      Use a gem that you are actively developing on your file system
    :code
      # lang: ruby
      gem 'nokogiri', :path => '~/Code/nokogiri'

  .bullet
    .description
      Install gems to a different location
      (the default is ~/.bundle)
    .how
      :code
        $ bundle install vendor --disable-shared-gems
      .notes
        By specifying --disable-shared-gems, you are telling bundler to install the gems into vendor, even if they are already installed in the system
    = link_to 'Learn More: bundle install', 'bundle_install.html'

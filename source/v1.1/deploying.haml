%h2 Deploying bundled applications
.contents
  .bullet
    .description
      Before deploying an app that uses Bundler, Add your <code>Gemfile</code>
      and <code>Gemfile.lock</code> to source control, but ignore the
      <code>.bundle</code> folder, which is specific to each machine.
    :code
      $ echo ".bundle" >> .gitignore
      $ git add Gemfile Gemfile.lock .gitignore
      $ git commit -m "Add Bundler support"
    .notes
      Once you have done that, there are two ways to deploy using Bundler:
      manually or automatically.

  .bullet
    .description
      %h3 Manual deployment
      In your deploy script, after updating to the latest
      code, install your bundle to the <code>vendor/bundle</code>
      directory, ensuring all your dependencies are met.
    :code
      $ bundle install --deployment
    .notes
      %p
        Start your application servers as usual, and your
        application will use your bundled environment
        with the exact same gems you use in development.

      %p
        If you have run <code>bundle package</code>, the cached
        gems will be used automatically.

      = link_to 'Learn More: Packing', './bundle_package.html'

  .bullet
    %h3 Automatic deployment with Capistrano
    .description
      To pull in the Bundler Cap task, just add this to your
      <code>deploy.rb</code> file:
    :code
      # lang: ruby
      require 'bundler/capistrano'
    .notes
      That's it! Running <code>cap deploy</code> will now automatically run
      <code>bundle install</code> on the remote server with deployment-friendly
      options. A list of options that can be changed is available in the help
      for the cap task. To see it, run <code>cap -e bundle:install</code>.

  .bullet
    .description
      %h3 Automatic deployment with Vlad
      There is a default Vlad task available. To make it available, add this line
      to the Vlad <code>deploy.rb</code>.
    :code
      # lang: ruby
      require 'bundler/vlad'
    .notes
      Once you have done that, the <code>vlad:bundle:install</code> task will be
      available for use. Make sure it is run as part of your deploy. For example:
    :code
      # lang: ruby
      task "vlad:deploy" => %w[
        vlad:update vlad:bundle:install vlad:start_app vlad:cleanup
      ]

  .bullet
    .description
      %h3 After deploying
      Make sure to use <code>bundle exec</code> to run any executables
      from gems in the bundle
    :code
      $ bundle exec rake db:setup
    .notes
      Alternatively, you can use the <code>--binstubs</code> option on the
      install command to generate executable binaries that can be used instead of
      <code>bundle exec</code>.
    = link_to 'Learn More: Executables', './man/bundle-exec.1.html'

  .bullet
    .description
      %h3 Heroku
      When you deploy to Heroku, Bundler will be run automatically as long as a Gemfile is present. If you check in your Gemfile.lock, Heroku will run <code>`bundle install --deployment`</code>. If you want to exclude certain groups using the <code>--without</code> option, you need to use <code>`heroku config`</code>.
    :code
      $ heroku config:add BUNDLE_WITHOUT="test development" --app app_name
    = link_to 'Heroku Bundler Documentation', 'http://docs.heroku.com/bundler'

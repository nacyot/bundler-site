#intro
  Bundler manages an <strong>application's dependencies</strong> through its
  entire life across many machines systematically and repeatably.

%h2 I am interested in

.contents
  %ul.bullet
    = link_to 'Troubleshooting', 'https://github.com/bundler/bundler/blob/1-0-stable/ISSUES.md'
    = link_to 'Understanding Bundler', './rationale.html'
    = link_to 'Gemfile Manual', './man/gemfile.5.html'
    = link_to 'Command Line Reference', './commands.html'

%h2#getting-started
  Getting Started

.contents
  .bullet
    .description
      Getting started with bundler is easy
    :code
      $ gem install bundler

  .bullet
    .description
      Specify your dependencies in a Gemfile in your project's root
    :code
      # lang: ruby
      source 'https://rubygems.org'
      gem 'nokogiri'
      gem 'rack', '~>1.1'
      gem 'rspec', :require => 'spec'
    = link_to 'Learn More: Gemfiles', './gemfile.html'

  .bullet
    .description
      Install all of the required gems from your specified sources
    :code
      $ bundle install
      $ git add Gemfile Gemfile.lock
    = link_to 'Learn More: bundle install', './bundle_install.html'
    .notes
      Make sure to add Gemfile.lock to your repository. This will ensure that
      other developers on your app, as well as your deployment environment, use
      exactly the same third-party code as you just installed.

  .bullet
    .description
      Inside your app, load up the bundled environment
    :code
      # lang: ruby
      require 'rubygems'
      require 'bundler/setup'

      # require your gems as usual
      require 'nokogiri'
    = link_to 'Learn More: Bundler.setup', './bundler_setup.html'

  .bullet
    .description
      Run an executable that comes with a gem in your bundle
    :code
      $ bundle exec rspec spec/models
    .notes
      %p
        In some cases, running executables without <code>bundle exec</code> may
        work, if the executable happens to be installed in your system and does 
        not pull in any gems that conflict with your bundle.

      %p
        However, this is unreliable and is the source of considerable pain. Even
        if it looks like it works, it may not work in the future or on another
        machine.

    .description
      If you want a way to get a shortcut to gems in your bundle
    :code
      $ bundle install --binstubs
      $ bin/rspec spec/models
    .notes
      The executables installed into <code>bin</code> are scoped to the bundle
      and will always work
    = link_to 'Learn More: Executables', './man/bundle-exec.1.html'

%h2#using-bundler-with-rails
  Using Bundler with Rails

.contents
  .bullet
    .description
      Bundler works out of the box with Rails 3. Once you understand the basics
      of using bundler, you know everything you need to know.
      = link_to 'Using Bundler with Rails 3', './rails3.html'

  .bullet
    .description
      Bundler works with Rails 2.3 with a small change to boot.rb and adding a
      preinitializer.rb.
      = link_to 'Using Bundler with Rails 2.3', './rails23.html'

%h2#checking-out-application-with-a-gemfile-for-development
  Checking Out an Application With a Gemfile for Development

.contents
  .bullet
    .description
      Install the required gems
    :code
      $ bundle install
    = link_to 'Learn More: bundle install', './bundle_install.html'
    .notes
      If your system stores its gems in a root-owned location (this is the
      default for Mac OSX), bundler will ask you for your password, so it can
      install the gems there.

%h2#updating-your-dependencies
  Updating Your Dependencies

.contents
  .bullet
    .description
      Make a change to your Gemfile
    :code
      # lang: ruby
      # change
      gem 'nokogiri', '1.4.2'
      # to
      gem 'nokogiri', '1.4.3'
  .bullet
    .description
      Install the new gems
    :code
      $ bundle install
    .notes
      %p
        After making a change to your <code>Gemfile</code>, the next
        <code>bundle install</code> will try to update the gems in your snapshot
        (<code>Gemfile.lock</code>) without forcing an update to any of the
        other gems in your Gemfile.

      %p
        This will usually work for simple dependencies, like
        <code>nokogiri</code> or <code>sqlite3</code>. On the other hand,
        updating Rails will usually require an update to some other component,
        because of the amount of dependencies it has.

  .bullet
    .description
      If bundler reports a conflict, tell bundler to explicitly update the gem,
      but none of the other top-level dependencies (the ones in your
      <code>Gemfile</code>)
    :code
      $ bundle update rails
    = link_to 'Learn More: bundle update', './man/bundle-update.1.html'

  .bullet
    .description
      In some rare cases, bundler will be unable to update the dependency
      without updating the top-level dependencies as well. In this case, tell
      bundler to update <strong>all</strong> dependencies
    :code
      $ bundle update

  .bullet
    .description
      To find out whether a newer version of a gem is available without updating
      yet:
    :code
      $ bundle outdated nokogiri
    .notes
      %p
        Check for newer pre-release versions:
        <code>bundle outdated nokogiri --pre</code>
      %p
        Or leave off the gem name to check for newer versions of all gems:
        <code>$ bundle outdated</code>
    = link_to 'Learn More: bundle outdated', './bundle_outdated.html'

%h2#deploying-your-application
  Deploying Your Application

.contents
  .bullet
    .description
      On production servers, you can enable deployment mode:
    :code
      $ bundle install --deployment
    .notes
      Do <b>not</b> use this flag on development machines. The
      <code>--deployment</code> flag turns on defaults that are appropriate for
      a deployment environment. Gems are installed to <code>vendor/bundle</code>
      and the <code>Gemfile.lock</code> must be checked in and up to date before
      Bundler is run.
    = link_to 'Learn More: deploying', './deploying.html'

%h2#digging-further
  Digging Further

.contents
  .bullet
    .description
      Store all of the required gems in your application. All future installs
      will get gems from this cache, bypassing rubygems.org
    :code
      $ bundle package
    = link_to 'Learn More: bundle package', './bundle_package.html'

  .bullet
    .description
      Put dependencies in a group, so they can be ignored at install time or
      required together in your application
    :code
      # lang: ruby
      group :development do
        gem 'wirble'
      end
    = link_to 'Learn more: Groups', './groups.html'

  .bullet
    .description
      Use a gem that is stored in git and has a <code>.gemspec</code> at its
      root. Bundler will make the executables available to <code>bundle exec</code>
      and compile C extensions
    :code
      # lang: ruby
      gem 'nokogiri', :git => 'https://github.com/tenderlove/nokogiri.git'
    = link_to 'Learn more: Git', './git.html'

  .bullet
    .description
      Use a gem that you are actively developing on your file system
    :code
      # lang: ruby
      gem 'nokogiri', :path => '~/Code/nokogiri'

  .bullet
    .description
      Install gems to an alternate location. By default, bundler installs your
      gems to the system location
    :code
      $ bundle install --path vendor
    .notes
      When installing to a path, bundler completely isolates your gems from the
      system, guaranteeing you a clear set of dependencies.
    = link_to 'Learn More: bundle install', './bundle_install.html'

  .bullet
    .description
      Create a code file along with the installed gems that can load
      dependencies without Bundler
    :code
      $ bundle install --standalone
    = link_to 'Learn More: bundle install', './bundle_install.html'

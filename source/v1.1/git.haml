%h2 Gems from git repositories

.contents
  .bullet
    .description
      Bundler adds the ability to use gems directly from git repositories. Setting
      them up is as easy as adding a gem to your Gemfile. Using the very latest
      version of a gem (or even a fork) is just as easy as using an official
      release.
    .description
      Because RubyGems lacks the ability to handle gems from git, any gems
      installed from a git repository will not show up in <code>gem list</code>.
      They will, however, be available after running <code>Bundler.setup</code>.

  .bullet
    .description
      Specify that a gem should come from a git
      repository with a .gemspec at its root
    :code
      # lang: ruby
      gem 'nokogiri', :git => 'https://github.com/tenderlove/nokogiri.git'

  .bullet
    .description
      If there is no .gemspec at the root of
      a git repository, you must specify a version
      that bundler should use when resolving
      dependencies
    :code
      # lang: ruby
      gem 'deep_merge', '1.0', :git => 'https://github.com/peritor/deep_merge.git'

  .bullet
    .description
      Specify that a git repository containing
      multiple .gemspec files should be treated
      as a gem source
    :code
      # lang: ruby
      git 'https://github.com/rails/rails.git' do
        gem 'railties'
        gem 'action_pack'
        gem 'active_model'
      end

  .bullet
    .description
      Specify that a git repository should use
      a particular ref, branch, or tag
    :code
      # lang: ruby
      :git => 'https://github.com/rails/rails.git', :ref => '4aded'
      :git => 'https://github.com/rails/rails.git', :branch => '2-3-stable'
      :git => 'https://github.com/rails/rails.git', :tag => 'v2.3.5'

  .bullet
    .description
      Specifying a ref, branch, or tag for a
      git repository specified inline works
      exactly the same way
    :code
      # lang: ruby
      gem 'nokogiri', :git => 'https://github.com/tenderlove/nokogiri.git', :ref => '0eec4'

  .bullet
    .description
      Bundler can use HTTP(S), SSH, or git
    :code
      # lang: ruby
      gem 'nokogiri', :git => 'https://github.com/tenderlove/nokogiri.git'
      gem 'nokogiri', :git => 'git@github.com:tenderlove/nokogiri.git'
      gem 'nokogiri', :git => 'git://github.com/tenderlove/nokogiri.git'

  .bullet
    .description
      If you are getting your gems from a public GitHub repository,
      you can use the shorthand
    :code
      # lang: ruby
      gem 'nokogiri', :github => 'tenderlove/nokogiri'
    .description
      If the repository name is the same as the GitHub account hosting it,
      you can omit it
    :code
      # lang: ruby
      gem 'rails', :github => 'rails'
    .description
      <b>NB:</b> This shorthand is insecure in versions of Bundler prior to 2.0! Use HTTPS instead
    :code
      # lang: ruby
      gem 'rails', :git => 'https://github.com/rails/rails'
    .description
      Alternatively, you can specify a full commit hash
    :code
      # lang: ruby
      gem 'rails', :github => 'rails', :ref => 'a9752dcfd15bcddfe7b6f7126f3a6e0ba5927c56'

%h2 Security
.contents
  .bullet
    .description
      <code>http://</code> and <code>git://</code> URLs are insecure, and should
      be avoided if at all possible. These protocols are unauthenticated, so a
      man-in-the-middle attacker can tamper with the code and compromise your system.
      Note that the <code>:github</code> shortcut translates to a <code>git://</code>
      URL in pre-2.0 versions.

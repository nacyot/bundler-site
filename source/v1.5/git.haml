%h2 Git 저장소의 gem

.contents
  .bullet
    .description
      번들러는 git 저장소에서 직접 gem을 이용하는 기능을 추가했습니다. Gemfile에
      gem을 넣는 것만큼 설정하기 쉽습니다. 최신 버전의 gem(이나 포크)도
      정식 릴리스만큼 쉽게 사용하실 수 있습니다.
    .description
      루비젬에는 git에 있는 gem을 제어할 수 있는 기능이 없으므로 git 저장소에서
      설치한 gem은 <code>gem list</code>에서는 보이지 않을 것입니다. 하지만
      <code>Bundler.setup</code>을 실행하면 사용 가능합니다.

  .bullet
    .description
      gem으로 사용하려면 git 저장소 루트에 .gemspec 파일이 있어야 합니다.
    :code
      # lang: ruby
      gem 'nokogiri', :git => 'https://github.com/tenderlove/nokogiri.git'

  .bullet
    .description
      git 저장소의 루트에 .gemspec 파일이 없다면 번들러가 의존성을 해결할
      때 사용할 버전을 지정해야 합니다.
    :code
      # lang: ruby
      gem 'deep_merge', '1.0', :git => 'https://github.com/peritor/deep_merge.git'

  .bullet
    .description
      git 저장소가 여러 .gemspec 파일을 가지고 있다면 gem 소스와 같은
      취급을 합니다.
    :code
      # lang: ruby
      git 'https://github.com/rails/rails.git' do
        gem 'railties'
        gem 'action_pack'
        gem 'active_model'
      end

  .bullet
    .description
      git 저장소는 특정 ref, branch, tag만 사용합니다.
    :code
      # lang: ruby
      :git => 'https://github.com/rails/rails.git', :ref => '4aded'
      :git => 'https://github.com/rails/rails.git', :branch => '2-3-stable'
      :git => 'https://github.com/rails/rails.git', :tag => 'v2.3.5'

  .bullet
    .description
      git 저장소의 ref, branch, tag를 한 줄로 지정해도 똑같이 동작합니다.
    :code
      # lang: ruby
      gem 'nokogiri', :git => 'https://github.com/tenderlove/nokogiri.git', :ref => '0eec4'

  .bullet
    .description
      Bundler can use HTTP(S), SSH, or git
    :code
      # lang: ruby
      gem 'nokogiri', :git => 'https://github.com/tenderlove/nokogiri.git'
      gem 'nokogiri', :git => 'git@github.com:tenderlove/nokogiri.git'
      gem 'nokogiri', :git => 'git://github.com/tenderlove/nokogiri.git'

  .bullet
    .description
      공개된 GitHub 저장소에서 gem을 가져오는 경우에는 축약해서 쓸 수 있습니다.
    :code
      # lang: ruby
      gem 'nokogiri', :github => 'tenderlove/nokogiri'
    .description
      만약 GitHub 계정의 이름과 저장소의 이름이 같다면 생략할 수 있습니다.
    :code
      # lang: ruby
      gem 'rails', :github => 'rails'
    .description
      <b>NB:</b> This shorthand is insecure in versions of Bundler prior to 2.0! Use HTTPS instead
    :code
      # lang: ruby
      gem 'rails', :git => 'https://github.com/rails/rails'
    .description
      Alternatively, you can specify a full commit hash
    :code
      # lang: ruby
      gem 'rails', :github => 'rails', :ref => 'a9752dcfd15bcddfe7b6f7126f3a6e0ba5927c56'

%h2 Security
.contents
  .bullet
    .description
      <code>http://</code> and <code>git://</code> URLs are insecure, and should
      be avoided if at all possible. These protocols are unauthenticated, so a
      man-in-the-middle attacker can tamper with the code and compromise your system.
      Note that the <code>:github</code> shortcut translates to a <code>git://</code>
      URL in pre-2.0 versions.

%h2#local 로컬 git 저장소
.contents
  .bullet
    .description
      번들러는 리모트 버전을 사용하는 대신에 로컬 git 저장소를 사용하도록
      할 수도 있습니다. 로컬 오버라이드를 설정하면 됩니다.
    :code
      bundle config local.GEM_NAME /path/to/local/git/repository

  .bullet
    .description
      예를 들어 로컬 Rack 저장소를 사용하려면 이렇게 호출합니다.
    :code
      bundle config local.rack ~/Work/git/rack
    .description
      그리고 git 저장소의 브렌치를 지정합니다.
    :code
      # lang: ruby
      gem 'rack', :github => 'rack/rack', :branch => 'master'

  .bullet
    .description
      %p
        이제 리모트 git 저장소를 체크아웃하는 대신에 로컬 오버라이드가
        사용됩니다. 패스 소스와 비슷하지만 git 저장소가 변경될 때마다
        변경사항이 번들러에 의해 자동으로 반영됩니다. 이 말은 로컬 git
        저장소에 커밋되면 <code>Gemfile.lock</code> 안의 리비전이 갱신
        된다는 뜻입니다. 이렇게 하면 git 서브모듈을 사용하는 것과 같은
        주의가 필요합니다. 리모트에 푸시하기 전에 로컬 오버라이드가
        푸시되었는지 확인해야 합니다. 그렇지 않다면 로컬 기기에만 있는
        커밋을 지정하게 됩니다.

      %p
        번들러는 개발자가 동작하지 않는 참조를 하는지에 대해 많은 검사를
        합니다. 특히 이 기능을 사용할 때는 <code>Gemfile</code>에 브랜치를
        지정하도록 강제합니다. <code>Gemfile</code>에 적혀있는 브랜치와
        로컬 git 저장소의 현재 브랜치가 다르다면 번들러는 중단됩니다.
        언제나 맞는 브랜치에서 작업하는지 확인하고 다른 브랜치를 봤을 때의
        사고를 예방할 수 있습니다.

      %p
        마지막으로 번들러는 <code>Gemfile.lock</code> 안의 현재 리비전이
        로컬 git 저장소에도 있는지 확인합니다. 이렇게 함으로써 번들러는
        리모트의 마지막 변경을 가져오도록 강제 할 수 있습니다.

  .bullet
    .description
      %p 브랜치를 체크하길 원치 않는다면 이 옵션을 오버라이드 하세요.
    :code
      bundle config disable_local_branch_check true

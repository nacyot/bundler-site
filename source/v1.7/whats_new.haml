= partial "shared/whats_new"

%h2#version17 What's New in v1.7

.contents
  .bullet
    .description
      Bundler 1.7 is a security release, addressing a vulnerability where a gem
      might be installed from an unintended source server. The changes are
      limited to fixes for this vulnerability.
      = link_to 'Full 1.7 changelog', 'https://github.com/bundler/bundler/blob/1-7-stable/CHANGELOG.md'

%h2#overview Overview

.contents
  .bullet
    .description
      %p
        Bundler has always supported fetching gems from multiple gem servers,
        but it isn't always clear what gems come from what source. Complicating
        this, Bundler has not been consistent about source priority ordering
        from one version to another.
      %p
        Because of this, a <code>Gemfile</code> with multiple top-level
        <code>source</code> lines cannot reliably control the gem server that
        a particular gem is fetched from. This might result in installation of
        gem code from an unexpected source.
      %p
        Applications that only have a single <code>source</code> in their
        <code>Gemfile</code> are not affected.

%h2#source-selection Source Selection

.contents
  .bullet
    .description
      You can explicitly select an alternate RubyGems repository for one or more
      gems in your <code>Gemfile</code> using the <code>:source</code> option or
      a <code>source</code> block. Using multiple top-level gem sources is now
      deprecated.
    = link_to 'Learn More: Gemfiles', './gemfile.html'

%h2#ambiguous-source-detection Ambiguous Source Detection

.contents
  .bullet
    .description
      If a <code>Gemfile</code> <em>does</em> have multiple top-level gem
      sources, <code>bundle install</code> now warns when a gem is found in more
      than one source. This is designed to prevent a situation where a gem that
      is expected to be found on one gem server is "hijacked" by another server.
      For backwards compatibility, the gem is still installed, but Bundler
      prints a warning detailing the gem server URL that was used, and listing
      others where a gem with the same name was found. Using explicit source
      selection suppresses this warning.

%h2#global-source-ordering Global Source Ordering

.contents
  .bullet
    .description
      The order that top-level sources are searched is documented as last added
      to first added, but prior to version 1.7.0, there was not an automated
      test for this ordering, and it was inadvertently reversed in versions
      1.5.0 through 1.6.5. The documented ordering is restored in this version,
      and is now included in the test suite to prevent regression.

%h2#upgrading Upgrading

.contents
  .bullet
    .description
      Bundler adheres strictly to semantic versioning, and version 1.7.0 is
      fully backwards compatible with any <code>Gemfile</code> that worked with
      earlier versions. If you have an application that uses multiple gem
      servers in its <code>Gemfile</code>, you may see warnings about ambiguous
      gem sources after upgrading. Whether or not you see these warnings, the
      Bundler team highly recommends that users of multiple gem servers update
      your <code>Gemfile</code> to use the new syntax.

    .note
      Use of the new <code>source</code> syntax will cause your
      <code>Gemfile</code> to become incompatible with Bundler versions earlier
      than 1.7.0. You should only perform this change after updating Bundler in
      all of your environments.

      %ol
        %li
          Choose your primary gem source (usually
          <code>https://rubygems.org</code>) and keep that at the top of the
          <code>Gemfile</code>
        %li
          For each additional gem source, add a block to the <code>source</code>
          line and move the relevant gem declarations inside it.
          %p For example, this <code>Gemfile</code>:
          :code
            # lang: ruby
            source 'https://rubygems.org'
            source 'https://gems.example.com'

            gem 'rails', '4.1.4'
            gem 'sqlite3'
            gem 'my_gem', '1.0'
            gem 'another_gem', '1.2.1'
          %p might change to this:
          :code
            # lang: ruby
            source 'https://rubygems.org'

            gem 'rails', '4.1.4'
            gem 'sqlite3'

            source 'https://gems.example.com' do
              gem 'my_gem', '1.0'
              gem 'another_gem', '1.2.1'
            end

%h2#workarounds Workarounds

.contents
  .bullet
    .description
      If you are unable to upgrade all of your environments to 1.7 immediately,
      there are other ways to mitigate this risk by changing your
      <code>Gemfile</code> to remove the additional sources:

      %ul
        %li
          First, re-evaluate whether the extra gem sources are even needed. If
          your application is using a legacy public gem server such as
          <code>gems.github.com</code> or <code>gems.rubyforge.org</code>, all
          of your required gems should now be synced to
          <code>rubygems.org</code>. Try removing these sources.
        %li
          If you do use gems that aren't available on <code>rubygems.org</code>,
          but are available from a git source, you can use the <code>:git</code>
          option in the gem declaration and it will be guaranteed to come from
          that git repository rather than a gem server.
        %li
          If neither of these situations apply, you can unpack the gem into your
          <code>vendor</code> directory and use the <code>:path</code> option
          when declaring the gem in your <code>Gemfile</code> to point it to the
          unpacked gem directory. In this case, you should commit the vendored
          gem to your source control system.
